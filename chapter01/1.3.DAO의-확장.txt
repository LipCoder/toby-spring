
변화의 성격이 다르다 --> 이유, 시기, 주기 등이 다르다

변화의 성격이 다른 것들끼리 분류해서 추상 클래스, 서브 클래스로 사용한다.
==> 서로 영향을 주지 않은 채로 필요한 시점에 독립적으로 변경한다.

하지만, 상속을 적용했다는 점에서 불편한 점이 있다.


## 1.3.1 클래스의 분리
상속보다 더 화끈하게 분리해보자.
두개의 관심사를 본격적으로 독립시키면서 손쉽게 확장할 수 있는 방법을 알아본다.

DB 커넥션과 관련된 부분을 서브클래스가 아닌, 아예 별도의 클래스에 담는다.
이렇게 만든 클래스는 UserDao가 이용하게 한다.

UserDao         ===========================>        SimpleConnectionMaker
    simpleConnectionMaker                               makeConnection()
    add()
    get()

SimpleConnectionMaker라는 새로운 클래스를 만들고 DB 생성기능을 그 안에 넣는다.
그리고 UserDao에서는 new 키워드를 이용해 SimpleConnectionMaker 클래스 오브젝트를 만들고,
add(), get() 메소드에서 사용하게 한다.
매번 만들어서 사용하는 것 보다는 오브젝트 내에 저장해두고 사용하는 편이 더 간편하다.

----------------------------------------------------------------------------
public class UserDao {
    private SimpleConnectionMaker simpleConnectionMaker;

    public UserDao {
        // 상태를 관리하는 것도 아니니 한 번만 만들어 인스턴스 변수에 저장해두고 메소드에서 사용하게 된다.
        simpleConnectionMaker = new SimpleConnectionMaker();    
    }

    public void add(User user) throws ClassNotFoundException, SQLException {
        Connection c = simpleConnectionMaker.makeNewConnection();
        ...
    }

    public User get(String id) throws ClassNotFoundException, SQLException {
        Connection c = simpleConnectionMaker.makeNewConnection();
        ...
    }
}
----------------------------------------------------------------------------

----------------------------------------------------------------------------
package springbook.user.dao;
...
public class SimpleConnectionMaker {
    public Connection makeNewConnection {
        public Connection makeNewConnection() throws ClassNotFoundException,
        SQLException {
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection(
                                "jdbc:mysql://localhost/springbook", "spring", "book");
            return c;
        }
    }
}
----------------------------------------------------------------------------

성격이 다른 코드를 분리하였지만, 이번엔 다른 문제가 발생하였다.
N 사와 D 사에 UserDao 클래스만 공급하고 상속을 통해 DB 커넥션 기능을 사용했던게 다시 불가능해졌다.

SimpleConnectionMaker 클래스에 종속되어 있기 때문에 상속을 사용했을 때처럼 UserDao 코드가
수정없이 DB 커넥션 생성 기능을 변경할 방법이 없다.
알맞은 커넥션을 제공하는 클래스를 사용하기 위해서는 UserDao 소스코드 다음 줄을 직접 수정해야 한다.
소스코드를 함께 제공하지 않고는 DB 연결 방법을 바꿀 수 없다는 문제로 다시 되돌아왔다.


## 1.3.2 인터페이스의 도입 
이러한 문제를 해결해주기 위해 서로 긴밀하게 연결되지 않도록 중간에 추상적인 느슨한 연결고리를 만들어준다.
이를 위해 자바가 제공하는 가장 유용한 도구는 바로 인터페이스이다.

인터페이스는 자신을 구현한 클래스에 대한 구체적인 정보는 모두 감춘다.
오브젝트를 만들기 위해 구체적인 클래스 하나를 선택해야겠지만, 인터페이스로 추상화해놓은 최소한 통로를 통해 
접근하는 쪽에서는 오브젝트를 만들때 사용할 클래스가 무엇인지 몰라도된다.
인터페이스를 통해 접근하면 실제 구현 클래스를 바꿔도 신경 쓸 일이 없다.

인터페이스를 도입하면, 이제 UserDao는 자신이 사용할 클래스를 몰라도 된다.
인터페이스를 이용해 원하는 기능을 사용하기만 하면 된다.

UserDao =========================>  ConnectionMaker
    connectionMaker                     makeConnection()
    add()                               ---------------> NConnectionMaker
    get()                                                   makeConnection() 세부구현
                                        ---------------> DConnectionMaker
                                                            makeConnection() 세부구현

인터페이스는 어떤 일을 하겠다는 기능만 정의해놓은 것이다. 따라서 어떻게 하겠다는 구현 방법은 나타나 있지 않다.
구현 방법은 이를 구현한 클래스들이 알아서 결정할 일이다.
UserDao가 인터페이스를 사용하게 한다면 인터페이스 메소드를 통해 알 수 있는 기능에만 관심을 가지면 된다.

ConnectionMaker 인터페이스
----------------------------------------------------------------------------
package springbook.user.dao;
...
public interface ConnectionMaker {
    public Connection makeConnection() throws ClassNotFoundException, 
            SQLException;
}
----------------------------------------------------------------------------

ConnectionMaker 구현 코드
----------------------------------------------------------------------------
package springbook.user.dao;
...
public class DConnectionMaker implements ConnectionMaker {
    ...
    public Connection makeConnection() throws ClassNotFoundException, SQLException {
        // D 사의 독자적인 방법으로 Connection을 생성하는 코드
    }
}
----------------------------------------------------------------------------

인터페이스를 사용하도록 개편한 UserDao
----------------------------------------------------------------------------
public class UserDao {
    private ConnectionMaker connectionMaker; // 구체적인 클래스를 알 필요가 없다.

    public UserDao() {
        connectionMaker = new DConnectionMaker(); // 앗.. 여기에 세부구현 클래스가?
    }

    public void add(User user) throws ClassNotFoundException, SQLException {
        Connection c = connectionMaker.makeConnection(); // 클래스가 바뀌어도 메소드가 바뀔 걱정이 없다
        ...
    }

    public User get(String id) throws ClassNotFoundException, SQLException {
        Connection c = connectionMaker.makeConnection();
        ...
    }
}
----------------------------------------------------------------------------

이제 D사나 N사가 구현 클래스를 새로 만든다고 해도 UserDao 코드를 수정할 일은 없을 것 같다.
하지만, UserDao 코드를 자세히 살펴보면 DConnection이라는 클래스 이름이 보인다.
DConnection 클래스의 생성자를 호출해 오브젝트를 생성하는 코드가 여전히 UserDao에 남아있다.

connectionMaker = new DConnectionMaker();

인터페이스를 사용해 구체적으로 커넥션을 사용하고 있던 코드를 제거되었지만, 
초기에 한 번 어떤 클래스의 오브젝트를 사용할지 결정하는 코드는 제거되지 않았다.
여전히 UserDao 소스코드를 함께 제공해, 필요할 때마다 UserDao 생성자 메소드를 직접 수정하라고 하지 않고는
고객에게 자유로운 DB 커넥션 확장 기능을 제공할 수 없다.


## 1.3.3 관계설정 책임의 분리
여전히 UserDao에는 어떤 ConnectionMaker 구현 클래스를 사용할지를 결정하는 코드가 남아 있다.
UserDao 변경 없이는 DB 커넥션 기능의 확장이 자유롭지 못한데,
그 이유는 UserDao 안에 분리되지 않은, 또 다른 관심사항이 존재하고 있기 때문이다.

이것은 기존에 봐왔던 관심사와는 다른 부류이다. 
new DConnectionMaker() 라는 코드는 매우 짧고 간단하지만 그 자체로 충분히 독립적인 관심사를 갖고 있다.
바로 UserDao가 어떤 ConnectionMaker 구현 클래스의 오브젝트를 이용하게 할지를 결정하는 것이다.
간단히 말하면 UserDao와 UserDao가 사용할 ConnectionMaker의 특정 구현 클래스 사이의 관계를 설정해주는 것에 관한 관심이다.
이 관심사를 담은 코드를 UserDao에서 분리하지 않으면 UserDao는 결코 독립적으로 확장 가능한 클래스가 될 수 없다.

    A 오브젝트             =====(사용)=====>           B 오브젝트 
[클라이언트(서비스 사용)]                              [서버(서비스 제공)]

UserDao의 클라이언트 오브젝트(UserDao를 사용하는 클래스)가 이 관심사를 두기 가장 적절한 위치이다.

오브젝트 사이의 관계는 런타임 시 한쪽이 다른 오브젝트의 레퍼런스를 갖고 있는 방식으로 만들어진다.
이 오브젝트는 얼마든지 메소드 파라미터를 사용해 전달할 수 있기 때문에 외부에서 만든걸 가져올 수도 있다.

이 파라미터를 인터페이스 형식으로 받아 모든 확장에 대한 클래스를 수용할 수 있게 한다.
이렇게 하면 UserDao는 파라미터로 받을 오브젝트가 어떤 클래스로부터 만들어졌는지 신경 쓸 필요가 없다.
이는 객체지향의 특성 중 다형성 덕분에 가능한 일이다.

이렇게 런타임 오브젝트 관계로 연결해주면 세부 구현체는 UserDao를 사용하는 코드에서 만들어 넘겨주기 때문에,
UserDao는 더이상 수정할 필요 없이 DB 커넥션을 확장할 수 있게된다.
UserDao의 생성자를 먼저 수정해보자

----------------------------------------------------------------------------
public UserDao(ConnectionMaker connectionMaker) {
    this.connectionMaker = connectionMaker;
}
----------------------------------------------------------------------------

그리고 기존 구체적인 클래스 생성은 외부 클라이언트 오브젝트에서 등장한다.

----------------------------------------------------------------------------
public class UserDaoTest {
    public static void main(String[] args) throws ClassNotFoundException, 
            SQLException {
        // UserDao가 사용한 커넥션 구현 클래스를 결정하고 오브젝트를 만든다.
        ConnectionMaker connectionMaker = new DConnectionMaker();

        // UserDao 생성, ConnectionMaker 오브젝트 제공
        UserDao dao = new UserDao(connectionMaker); 

        ...
    }
}
----------------------------------------------------------------------------

N사의 DB 커넥션을 적용하려면 NConnectionMaker을 생성해 UserDao 생성자 파라미터로 넘겨주면 된다.
DB 커넥션 방법을 어떻게 변경하든 UserDao 코드는 아무런 영향을 받지 않는다.

이러한 방법은 상속에 비해 훨씬 유연한 구조를 지닌다. 
DAO가 아무리 많아져도 DB 접속 방법에 대한 관심은 오직 한 군데에 집중되게 할 수 있고, 
DB 접속방법을 변경해야 할 때 오직 한 곳의 코드만 수정하면 된다.

UserDaoTest ----(생성/제공)----> UserDao ----(사용)----> ConnectionMaker
            ----(  사용  )---->                              ▲
            ------------------(생성)-----------------> DConnectionMaker

상속을 통한 확장 방법보다 더 깔끔하고 유연한 방법으로 UserDao와 ConnectionMaker 클래스들을 분리하고,
서로 영향을 주지 않으면서도 필요에 따라 자유롭게 확장할 수 있는 구조가 됐다.


## 1.3.4 원칙과 패턴
DAO 코드를 개선해온 결과를 객체지향 기술의 여러 가지 이론을 통해 설명하려고 한다.

### 개방 폐쇄 원칙 (Open-Closed Principle)
"클래스나 모듈은 확장에는 열려있어야 하고 변경에는 닫혀있어야 한다."
=> UserDao는 DB 연결 방법이라는 기능 확장에는 열려있다.
   동시에 UserDao 핵심 기능에 대한 구현코드는 변화에 영향을 받지 않고,
   유지할 수 있으므로 변경에는 닫혀 있다고 할 수 있다.

인터페이스 --      O (확장에 대해 완전히 개방)     --> 구현 클래스
인터페이스 <-- X (불펼요한 변화가 일어나지 않도록 폐쇄) -- 구현 클래스
[상속이 이러한 원칙을 잘 준수하고 있다.]
잘 설계된 객체지향 클래스 구조를 살펴보면 개방 폐쇄 원칙을 아주 잘 지키고 있다.

* 객체지향 설계 원칙(SOLID)
- SRP(The Single Responsibility Principle) : 단일 책임 원칙
    클래스는 하나의 기능만 가지고 있어야 하며, 그 기능을 완전히 책임져야 한다.

- OCP(The Open-Closed Principle) : 개방 폐쇄 원칙
    클래스는 확장에는 열려있어야 하고 변경에는 닫혀 있어야 한다.
    새로운 기능이 추가되더라도 기존 코드를 변경하지 않아야 한다.

- LSP(The Liskov Substitution Principle) : 리스코프 치환 원칙
    상속관계에서 하위 클래스는 상위 클래스의 자리에 사용될 수 있어야 한다.
    상속관계에서 하위 클래스는 상위 클래스의 기능을 완전히 대체할 수 있어야 한다.

- ISP(The Interface Segregation Principle) : 인터페이스 분리 원칙
    클라이언트는 자신이 사용하지 않는 인터페이스에 의존하지 않아야 한다.
    즉, 하나의 인터페이스 보다는 작은 단위로 분리된 여러 개의 인터페이스를 사용해야 한다.

- DIP(The Dependency Inversion Principle) : 의존관계 역전 원칙
    추상화에 의존해야 하며, 구체화에 의존하지 않아야 한다.
    클래스는 추상 클래스 및 인터페이스에 의존하도록 설계되어야 하며, 
    구체적인 구현체에는 의존하지 않아야 한다.


### 높은 응집도와 낮은 응집도 (high coherence and low coupling)

* 응집도가 높다 
--> 하나의 모듈, 클래스가 하나의 책임 또는 관심사에 집중되어 있다.
--> 불필요하거나 직접 연관이 없는 외부 관심과 책임이 얽혀 있지 않다.
--> 하나의 공통 관심사는 한 클래스에 모여 있다.

높은 응집도는 클래스 레벨뿐 아니라, 패키지, 컴포넌트, 모듈에 이르기까지 
그 대상의 크기가 달라도 동일한 원리로 적용될 수 있다.

만약에 응집도가 낮은 경우 변경시 전체에서 어느 부분이 바뀌어야 하는지 파악해야 하고,
또 그 변경으로 인해 바뀌지 않는 부분에는 다른 영향을 미치지 않는 파악해야 하는 이중 부담이 생긴다.

작업은 항상 전체적으로 일어나고 무엇을 변경해야 할지 명확하며, 그것이 다른 클래스 수정을 요구하지 않을 뿐더러,
기능에 영향을 주지 않는다는 사실을 손쉽게 확인할 수 있다.

응집도가 높으면 테스트 하기도 더 편하다. 
해당 부분에서만 테스트를 해보면 된다. 왜냐하면 변경시 전체적으로 적용이 일어나기 때문이다.


낮은 결합도는 높은 응집도보다 더 민감한 원칙이다.
책임과 관심사가 다른 오브젝트 모듈과는 느슨하게 연결된 형태를 유지하는 것이 바람직하다.

꼭 필요한 최소한의 방법만 간접적인 형태로 제공하고, 나머지는 서로 독집적이고 알 필요 없게 만들어주는 것이다.
결합도가 낮아지면 변화에 대응하는 속도가 높아지고, 구성이 깔끔해진다. 또한 확장도 매우 편리하다.

여기서 결합도란 '하나의 오브젝트 변경이 일어날 때 관계를 맺고 있는 다른 오브젝트에게 변화를 요구하는 정도'이다.
낮은 결합도란 결국, 하나의 변경이 발생할 때 여타 모듈과 객체로 변경에 대한 요구가 전파되지 않는 상황을 뜻한다.

ConnectionMaker의 도입으로 DB 연결 기능을 구현한 클래스가 바뀌더라도, DAO 코드가 변경될 필요가 없게 됐다.
이는 결합도가 보다 낮아졌음을 나타낸다.

결합도가 높아지면 변경에 따르는 작업량이 많아지고, 변경으로 인한 버그가 발생할 가능성이 높아진다.


### 전략 패턴 (Strategy Pattern)
개선한 UserDaoTest-UserDao-ConnectionMaker 구조를 디자인 패턴 시각으로 보면 전략패턴에 해당한다 볼 수 있다.
전략 패턴은 개방 폐쇄 원칙 실현에 가장 잘 들어 맞는 패턴이다.

전략 패턴은 변경이 필요한 알고리즘을 인터페이스를 통해 통째로 외부로 분리시키고, 
이를 구현한 구체적인 알고리즘 클래스를 필요에 따라 바꿔 사용할 수 있게 하는 디자인 패턴이다.
(여기서 알고리즘이란 독립적인 책임으로 분리가 가능한 기능을 뜻한다.)
하위 클래스들을 대체 가능한 전략이라고 보기 때문에, 전략 패턴이라 분린다.

컨텍스트내에서 변경 가능한 기능 --> 인터페이스 정의
인터페이스 --> 세부 구현A 
        --> 세부 구현B

A와 B를 교대하며 쓸 수 있으므로 전략을 바꿔가며 사용할 수 있다.

UserDao는 개방 페쇄 원칙을 잘 따르며, 응집력이 높고 결합도는 낮으며, 전략 패턴을 적용하였다.
이 구조가 점점 복잡하게 발전해 나가면서 이것들의 장점이 극대화 될 것이다.

스프링이란 바로 지금까지 설명한 객체지향적 설계 원칙과 디자인 패턴에 나타난 장점을
자연스럽게 개발자들이 활용할 수 있게 해주는 프레임워크이다.
기반은 잘 마무리가 되었으니, 이제 스프링의 등장을 자연스럽게 맞이할 타이밍이다.