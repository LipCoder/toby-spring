
DAO?
    DAO는 Data Access Object의 약자로 DB를 이용하여 데이터를 조회 및 조작하는 기능을 전담하는 오브젝트이다. 

자바빈(Bean) ?
    자바빈은 원래 비주얼 툴에서 조작 가능한 컴포넌트를 말한다.
    자바의 주력 개발 툴이 웹 기반으로 변경되면서 비주얼 컴포넌트는 인기를 잃어갔다.
    하지만, 코딩 관례의 일부분은 JSP 빈, EJB 와 같은 표준 기술과 오픈소스 기술을 통해 계속 이어져 왔다.
    다음 두 관례를 따라 만들어진 오브젝트를 자바빈이라고 부른다.

        1. 디폴트 생성자: 자바빈은 파라미터가 없는 디폴트 생성자를 갖고 있어야 한다. 
                    툴이나 프레임웤에서는 리플렉션을 이용해 오브젝트를 생성하기 때문이다. 
                    (리플렉션: 클래스의 메소드나 타입 및 필드에 접근할 수 있게 해주는 API)

        2. 프로퍼티: 자바빈이 노출하는, 이름을 가진 속성을 뜻한다. get(조회)이나 set(수정)으로 시작한다.


# 1.1.2
UserDao : 사용자 정보를 DB에 넣고 관리할 수 있는 Dao 클래스
Dao를 사용하기 위해서는 JDBC가 필요하고 작업 순서는 다음과 같다.
    1. DB 연결을 위한 Connection을 가져온다.
    2. SQL을 담은 Statement를 만든다.
    3. 만든 Statement를 실행한다.
    4. (조회의 경우)실행 결과를 ResultSet으로 받아 정보를 저장할 오브젝트에 옮겨준다.
    5. 생성된 리소스들을 닫아준다. (Connection, Statement, ResultSet)
    6. 예외가 발생하면 메소드 밖으로 던져 처리한다.

// UserDao
--------------------------------------------------------------------------------------------
package springbook.user.dao;
...

public class UserDao {
    public void add(User user) throws ClassNotFoundException, SQLException {
        Class.forName("com.mysql.jdbc.Driver");
        Connection c = DriverManager.getConnection(
            "jdbc:mysql://localhost/springbook", "spring", "book");
        
        PreparedStatement ps = c.prepareStatement(
            "insert into users(id, name, password) values(?,?,?)");
        ps.setString(1, user.getId());
        ps.setString(2, user.getName());
        ps.setString(3, user.getPassword());

        ps.executeUpdate();

        ps.close();
        c.close();
    }

    public void get(String id) throws ClassNotFoundException, SQLException {
        Class.forName("com.mysql.jdbc.Driver");
        Connection c = DriverManager.getConnection(
            "jdbc:mysql://localhost/springbook", "spring", "book");
        
        PreparedStatement ps = c.prepareStatement(
            "select * from users where id = ?");
        ps.setString(1, id);

        ResultSet rs = ps.executeQuery();
        rs.next();
        User user = new User();
        user.setId(rs.getString("id"));
        user.setName(rs.getString("name"));
        user.setPassword(rs.getString("password"));

        rs.close();
        ps.close();
        c.close();

        return user;
    }
}
--------------------------------------------------------------------------------------------

해당 절차를 토대로 UserDao를 만들었다.
이제 이를 테스트 해보기 위해서 main()을 이용할 것이다.

# 1.1.3 
만들어진 코드를 검증하고자 할 때 가장 간단한 방법은 자신을 스스로 검증하게 만드는 것이다.
모든 클래스는 자신을 엔트리 포인트로 설정해 직접 실행 가능학 해주는 main()이 있지 않은가

--------------------------------------------------------------------------------------------
public static void main(String[] args) throws ClassNotFoundException, SQLException {
    UserDao dao = new UserDao();

    User user = new User();
    user.setId("whiteship");
    user.setName("백기선");
    user.setPassword("married");

    dao.add(user);

    System.out.println(user.getId() + " 등록 성공");

    User user2 = dao.get(user.getId());
    System.out.println(user2.getName());
    System.out.println(user2.getPassword);

    System.out.println(user2.getId() + " 조회 성공");
}
--------------------------------------------------------------------------------------------

이렇게 해서 사용자 정보를 등록하고 조회하는 간단한 테스트 메소드까지 만들었다.
이 코드는 여러 가지 문제가 있으며, 앞으로 객체지향 설계에 맞춰 어떻게 개선되는지 보게 될것이다.

이러한 생각들을 가져보면 좋을 것이다...
- 왜 이 코드는 문제가 많다고 하는 것일까?
- 개선 했을때의 장점은 무엇인가?
- 장점들이 당장, 혹은 미래에 주는 유익은 무엇인가?
- DAO를 개선하는 경우와 그대로 사용하는 경우 무슨 차이가 있을까?

스프링을 공부한다는 것은 이런 문제 제기와 의문에 대해 답을 찾아나가는 과정이다.
하지만 간과하면 안되는 요인이 있는데, 스프링이 이러한 질문의 결론을 주지 않는다는 것이다.
스프링을 이용해 개발자가 스스로 만들어내는 것이지, 스프링이 덥석 줄 수 있는게 아니다.
스프링은 그저 좋은 결론을 내릴 수 있도록 힌트를 제공할 뿐이다. 
(선대 개발자들이 먼저 고민하고 제안한 방법 등)